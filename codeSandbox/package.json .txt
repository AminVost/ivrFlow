package.json : 
{
  "name": "automa",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@mui/icons-material": "^5.15.21",
    "@mui/material": "^5.15.21",
    "@reactflow/background": "^11.3.14",
    "@reactflow/controls": "^11.2.14",
    "@reactflow/minimap": "^11.7.14",
    "@reactflow/node-toolbar": "^1.3.14",
    "@svgr/plugin-svgo": "^8.1.0",
    "@testing-library/jest-dom": "^6.4.6",
    "@testing-library/react": "^16.0.0",
    "@testing-library/user-event": "^14.5.2",
    "css-select": "^5.1.0",
    "flatted": "^3.3.1",
    "nth-check": "^2.1.1",
    "postcss": "^8.4.39",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^5.2.1",
    "react-resize-detector": "^11.0.1",
    "reactflow": "^11.11.4",
    "short-unique-id": "^5.2.0",
    "svgo": "^3.3.2",
    "sweetalert2": "^11.12.2",
    "web-vitals": "^4.2.1"
  },
  "scripts": {
    "start": "webpack serve --mode development",
    "build": "webpack --mode production"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/core": "^7.24.7",
    "@babel/preset-env": "^7.24.7",
    "@babel/preset-react": "^7.24.7",
    "babel-loader": "^9.1.3",
    "css-loader": "^7.1.2",
    "html-webpack-plugin": "^5.6.0",
    "style-loader": "^4.0.0",
    "webpack": "^5.92.1",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.4"
  }
}


App.js = 
import React from 'react';
import "./App.css";
import "reactflow/dist/style.css";
import Home from "./Pages/Homepage/Home";

function App() {
  return (
    <>
      <Home />
    </>
  );
}

export default App;


index.js = 
import React from "react";
import ReactDOM from "react-dom/client";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { AppContextProvider } from "./Context/AppContext";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <AppContextProvider>
      <App />
    </AppContextProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


reportWebVitals.js = 
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


setupTests.js = 
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';



src\Components\Editor\Editor.js = 
import React, {
  useState,
  useRef,
  useCallback,
  useMemo,
  useEffect,
  useContext,
  memo,
} from "react";
import ReactFlow, {
  addEdge,
  useNodesState,
  useEdgesState,
  Controls,
  MiniMap,
  Background,
  Panel,
} from "reactflow";
import "./editor.css";
import CustomNode from "./CustomNode/CustomNode";
import uniqueId from "../../utils/uniqueId";
import ContextMenu from "./ContextMenu/ContextMenu";
import { RiSaveLine } from "react-icons/ri";
import { TbSend } from "react-icons/tb";

import { parse, stringify, toJSON, fromJSON } from "flatted";
import { IconButton } from "@mui/material";
import { PiSidebarSimpleFill } from "react-icons/pi";
import { BiFullscreen } from "react-icons/bi";
import { AppContext } from "../../Context/AppContext";
import MenuDrawer from "../Sidebar/MenuDrawer/MenuDrawer";
import { BsFillCircleFill } from "react-icons/bs";
import Swal from "sweetalert2";

function Editor() {
  const reactFlowWrapper = useRef(null);
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  // const [reactFlowInstance, setReactFlowInstance] = useState(null);
  const [menu, setMenu] = useState(null);
  const [isPublish, setVisiblePublish] = useState(false);
  const ref = useRef(null);

  const {
    width,
    showSidebar,
    setShowSidebar,
    reactFlowInstance,
    setReactFlowInstance,
    showDrawer,
    setShowDrawer,
    isUpdated,
    setIsUpdated,
    setData,
  } = useContext(AppContext);

  const onConnect = useCallback(
    (params) => {
      params.type = "smoothstep";
      setEdges((eds) => addEdge(params, eds));
      setIsUpdated(true);
    },
    [edges]
  );

  const onDragOver = useCallback((event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
  }, []);

  const onDrop = useCallback(
    (event) => {
      event.preventDefault();

      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();
      const data = event.dataTransfer.getData("application/reactflow");
      const { type, label, Icon, color } = JSON.parse(data);

      // check if the dropped element is valid
      if (typeof type === "undefined" || !type) {
        return;
      }

      const position = reactFlowInstance.screenToFlowPosition({
        x: event.clientX - reactFlowBounds.left,
        y: event.clientY - reactFlowBounds.top,
      });

      const newNode = {
        id: uniqueId(7),
        type: "custom",
        position,
        data: {
          label,
          nodeType: type,
          description: "",
          interval: "",
          url: "",
          screenshot: "none",
          cssSelecter: "",
          Icon,
          color,
          ref,
        },
      };

      setNodes((nds) => nds.concat(newNode));
      // setIsUpdated(true);
    },
    [reactFlowInstance]
  );

  const handleContextMenu = useCallback(
    (event, node) => {
      // Prevent native context menu from showing
      event.preventDefault();

      // Calculate position of the node context menu.
      const pane = ref.current.getBoundingClientRect();

      setMenu({
        id: node.id,
        top: event.clientY < pane.height - 200 && event.clientY - (40 - 10),
        left: event.clientX < pane.width - 200 && event.clientX - (384 + 100),
        right:
          event.clientX >= pane.width - 200 &&
          pane.width - event.clientX + (384 - 100),
        bottom:
          event.clientY >= pane.height - 200 &&
          pane.height - event.clientY + (40 + 10),
      });
    },
    [menu]
  );

  // Close the node context menu if it's open whenever the window is clicked.
  const onPaneClick = useCallback(() => setMenu(null), [menu]);

  const nodeTypes = useMemo(() => ({ custom: CustomNode }), []);

  const nodeColor = (node) => {
    return node.data.color;
  };

  const handleWorkflowData = useCallback(() => {
    const workflowData = { nodes, edges };
    localStorage.setItem("workflowData", stringify(workflowData));
  });

  useEffect(() => {
    try {
      const workflowData = parse(localStorage.getItem("workflowData"));
      if (workflowData?.nodes?.length > 0) {
        const { nodes, edges } = workflowData;
        setNodes(nodes);
        setEdges(edges);
      }
    } catch (error) {}
  }, []);

  return (
    <section className="editor-wrapper" ref={reactFlowWrapper}>
      <ReactFlow
        ref={ref}
        nodes={nodes}
        nodeTypes={nodeTypes}
        edges={edges}
        onNodesChange={onNodesChange}
        onEdgesChange={onEdgesChange}
        onConnect={onConnect}
        onInit={setReactFlowInstance}
        onDrop={onDrop}
        onDragOver={onDragOver}
        onPaneClick={onPaneClick}
        onNodeContextMenu={handleContextMenu}
        onEdgeContextMenu={handleContextMenu}
        minZoom={0.3}
        maxZoom={1.2}
      >
        <Background variant="dots" className="editor-bg" />
        <LeftPanel
          showSidebar={showSidebar}
          setShowSidebar={setShowSidebar}
          showDrawer={showDrawer}
          setShowDrawer={setShowDrawer}
          width={width}
        />
        <RightPanel
          handleWorkflowData={handleWorkflowData}
          isUpdated={isUpdated}
          isPublish={isPublish}
          setData={setData}
          setIsUpdated={setIsUpdated}
          setVisiblePublish={setVisiblePublish}
        />
        <Controls
          className="controls"
          position="bottom-right"
          fitViewOptions={{ duration: 800 }}
        />
        <MiniMap nodeColor={nodeColor} className="mini-map" />
        {menu && <ContextMenu onClick={onPaneClick} {...menu} />}
        {width <= "815" && <MenuDrawer />}
      </ReactFlow>
    </section>
  );
}

export default memo(Editor);

const LeftPanel = memo(
  ({ showSidebar, setShowSidebar, showDrawer, setShowDrawer, width }) => {
    return (
      <Panel position="top-left">
        <div className="left-panel-button">
          <IconButton
            disableTouchRipple
            onClick={() => {
              setShowSidebar(!showSidebar);
              setShowDrawer(!showDrawer);
            }}
          >
            {width > 815 ? (
              !showSidebar ? (
                <PiSidebarSimpleFill />
              ) : (
                <BiFullscreen />
              )
            ) : showSidebar ? (
              <PiSidebarSimpleFill />
            ) : (
              <BiFullscreen />
            )}
          </IconButton>
        </div>
      </Panel>
    );
  }
);

const RightPanel = memo(
  ({
    handleWorkflowData,
    isUpdated,
    setIsUpdated,
    setData,
    isPublish,
    setVisiblePublish,
  }) => {
    return (
      <Panel position="top-right">
        {isPublish && (
          <div
            className="right-panel-button"
            onClick={() => {
              console.log("Click Publish");
              // Swal.fire({
              //   position: "center",
              //   icon: "success",
              //   title: "Publish was successful",
              //   showConfirmButton: false,
              //   timer: 1500,
              // });
              setVisiblePublish(!isPublish);
              Swal.fire({
                position: "center",
                icon: "success",
                title: "Publish was successful",
                showConfirmButton: false,
                timer: 2000,
                customClass: {
                  popup: 'swal-popup',
                  title: 'swal-title',
                  icon: 'swal-icon'
                },
                background: '#27272a' // تغییر رنگ پس‌زمینه پیام
              });
            }}
          >
            <TbSend />
            <p>Publish</p>
          </div>
        )}

        <div
          className="right-panel-button"
          onClick={() => {
            if (isUpdated) {
              handleWorkflowData();
              setVisiblePublish(true);
              setIsUpdated(false);
              setData((prev) => ({ ...prev, status: false }));
            }
          }}
        >
          {isUpdated && <UpdateBadge />}
          <RiSaveLine />
          <p>Save</p>
        </div>
      </Panel>
    );
  }
);

const UpdateBadge = () => {
  return (
    <div
      style={{ position: "absolute", left: "-6px", top: "-6px", zIndex: "10" }}
    >
      <BsFillCircleFill color="cornflowerblue" />
    </div>
  );
};


src\Components\Editor\ContextMenu\ContextMenu.js = 
import React, { memo, useCallback, useContext } from "react";
import { useReactFlow } from "reactflow";
import "./contextMenu.css";
import uniqueId from "../../../utils/uniqueId";
import findEdgeById from "../../../utils/findEdgeById";
import { AppContext } from "../../../Context/AppContext";

function ContextMenu({ id, top, left, right, bottom, ...props }) {
  const { getNode, setNodes, addNodes, setEdges, getNodes } = useReactFlow();
  const { setIsUpdated } = useContext(AppContext);

  const duplicateNode = useCallback(() => {
    const node = getNode(id);
    const position = {
      x: node.position.x + 50,
      y: node.position.y + 50,
    };

    const updatedNodes = getNodes();
    setNodes(
      updatedNodes?.map((node) => ({
        ...node,
        selected: false,
      }))
    );
    addNodes({ ...node, selected: true, id: uniqueId(7), position });
  }, [id, getNode, addNodes]);

  const deleteNode = useCallback(() => {
    setNodes((nodes) => nodes.filter((node) => node.id !== id));
    setEdges((edges) => edges.filter((edge) => edge.source !== id));
  }, [id, setNodes, setEdges]);

  return (
    <div
      style={{ top, left, right, bottom }}
      className="context-menu"
      {...props}
    >
      {findEdgeById(id) ? (
        <EdgesMenu id={id} setEdges={setEdges} setIsUpdated={setIsUpdated} />
      ) : (
        <NodesMenu
          id={id}
          duplicateNode={duplicateNode}
          setIsUpdated={setIsUpdated}
          deleteNode={deleteNode}
        />
      )}
    </div>
  );
}

export default ContextMenu;

const NodesMenu = memo(({ id, duplicateNode, deleteNode, setIsUpdated }) => {
  return (
    <>
      <button
        onClick={() => {
          duplicateNode();
          setIsUpdated(true);
        }}
      >
        duplicate
      </button>
      <button
        onClick={() => {
          deleteNode();
          setIsUpdated(true);
        }}
      >
        delete
      </button>
    </>
  );
});

const EdgesMenu = memo(({ id, setEdges, setIsUpdated }) => {
  const handleDeleteEdge = () => {
    setEdges((prevEdges) => prevEdges.filter((edge) => edge.id !== id));
    setIsUpdated(true);
  };

  return (
    <>
      <button onClick={handleDeleteEdge}>Delete</button>
    </>
  );
});
